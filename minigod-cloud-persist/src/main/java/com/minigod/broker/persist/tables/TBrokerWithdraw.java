package com.minigod.broker.persist.tables;
import com.minigod.db4j.table.AllField;
import com.minigod.db4j.table.AbstractTable;
import com.minigod.db4j.table.TableField;
import com.minigod.db4j.table.TableFieldImpl;
import java.util.HashMap;
import java.util.Map;
import java.math.BigDecimal;
import java.util.Date;
import com.minigod.db4j.table.DateTableField;
import com.minigod.db4j.table.DateTableFieldImpl;

public class TBrokerWithdraw extends AbstractTable {

	static {
		init();
	}

	private TBrokerWithdraw(){
		super.tableName = "broker_withdraw";
	}

	private TBrokerWithdraw(String aliasName){
		this();
		setAliasName(aliasName);
	}

	public static final TBrokerWithdraw getInstance() {
		return new TBrokerWithdraw();
	}

	public static final TBrokerWithdraw getInstance(String aliasName) {
		return new TBrokerWithdraw(aliasName);
	}

	private static Map<String, String> allFieldMap;
	private static final void init() {
		allFieldMap = new HashMap<String, String>();
		allFieldMap.put("id", "id");
		allFieldMap.put("accountId", "account_id");
		allFieldMap.put("flowId", "flow_id");
		allFieldMap.put("withType", "with_type");
		allFieldMap.put("amount", "amount");
		allFieldMap.put("actualAmount", "actual_amount");
		allFieldMap.put("feeRate", "fee_rate");
		allFieldMap.put("accountNo", "account_no");
		allFieldMap.put("accountName", "account_name");
		allFieldMap.put("withDesc", "with_desc");
		allFieldMap.put("state", "state");
		allFieldMap.put("failReason", "fail_reason");
		allFieldMap.put("withDate", "with_date");
		allFieldMap.put("createTime", "create_time");
		allFieldMap.put("updateTime", "update_time");
	}

	public String getFieldName(String javaFieldName) {
		return allFieldMap.get(javaFieldName);
	}

	public final TableField<Integer> all = new AllField<Integer>(this,  "*",null);

	public TableField<?> allField() {
		return all;
	}

	/**
	 * 主键 | bigint(20)
	 */
	public final TableField<Long>  pk = new TableFieldImpl<Long>(this,"id","id","主键");
	public final TableField<Long> id = new TableFieldImpl<Long>(this,"id","id","主键");

	/**
	 * 账户ID | bigint(20)
	 */
	public final TableField<Long> accountId = new TableFieldImpl<Long>(this,"account_id","accountId","账户ID");

	/**
	 * 流水表ID | bigint(20)
	 */
	public final TableField<Long> flowId = new TableFieldImpl<Long>(this,"flow_id","flowId","流水表ID");

	/**
	 * 提现类型 1:微信提现 2:银行卡提现 | int(1)
	 */
	public final TableField<Integer> withType = new TableFieldImpl<Integer>(this,"with_type","withType","提现类型 1:微信提现 2:银行卡提现");

	/**
	 * 提现金额 | decimal(16,2)
	 */
	public final TableField<BigDecimal> amount = new TableFieldImpl<BigDecimal>(this,"amount","amount","提现金额");

	/**
	 * 到账金额 | decimal(16,2)
	 */
	public final TableField<BigDecimal> actualAmount = new TableFieldImpl<BigDecimal>(this,"actual_amount","actualAmount","到账金额");

	/**
	 * 手续费 | varchar(10)
	 */
	public final TableField<String> feeRate = new TableFieldImpl<String>(this,"fee_rate","feeRate","手续费");

	/**
	 * 到账账号 | varchar(500)
	 */
	public final TableField<String> accountNo = new TableFieldImpl<String>(this,"account_no","accountNo","到账账号");

	/**
	 * 账户名称 | varchar(200)
	 */
	public final TableField<String> accountName = new TableFieldImpl<String>(this,"account_name","accountName","账户名称");

	/**
	 * 提现描述 | varchar(200)
	 */
	public final TableField<String> withDesc = new TableFieldImpl<String>(this,"with_desc","withDesc","提现描述");

	/**
	 * 发送状态 0:等待审批 1:已发送 2:发送失败 | int(2)
	 */
	public final TableField<Integer> state = new TableFieldImpl<Integer>(this,"state","state","发送状态 0:等待审批 1:已发送 2:发送失败");

	/**
	 * 发送失败原因 | varchar(200)
	 */
	public final TableField<String> failReason = new TableFieldImpl<String>(this,"fail_reason","failReason","发送失败原因");

	/**
	 * 提现日期 | date
	 */
	public final DateTableField<Date> withDate = new DateTableFieldImpl<Date>(this,"with_date","withDate","提现日期");

	/**
	 * 创建时间 | datetime
	 */
	public final DateTableField<Date> createTime = new DateTableFieldImpl<Date>(this,"create_time","createTime","创建时间");

	/**
	 * 修改时间 | datetime
	 */
	public final DateTableField<Date> updateTime = new DateTableFieldImpl<Date>(this,"update_time","updateTime","修改时间");

	private final TableField<?>[] allFields = new TableField<?>[] {id,accountId,flowId,withType,amount,actualAmount,feeRate,accountNo,accountName,withDesc,state,failReason,withDate,createTime,updateTime};

	public TableField<?>[] getAllFields() {
		return allFields;
	}

	@SuppressWarnings("unchecked")
	public TableField<?> getPK() {
		return pk;
	}

	@SuppressWarnings("unchecked")
	public TableField<?> getLockVersion() {
		return null;
	}

	public final boolean isAutoGeneratedPK() {
		return true;
	}

	public final boolean isLockVersion() {
		return false;
	}

	public String toString() {
		return "TBrokerWithdraw[table=broker_withdraw]";
	}
}
