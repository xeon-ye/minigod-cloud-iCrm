package com.minigod.persist.tables;
import com.minigod.db4j.table.AllField;
import com.minigod.db4j.table.AbstractTable;
import com.minigod.db4j.table.TableField;
import com.minigod.db4j.table.TableFieldImpl;
import java.util.HashMap;
import java.util.Map;
import java.util.Date;
import com.minigod.db4j.table.DateTableField;
import com.minigod.db4j.table.DateTableFieldImpl;

public class TPtfIdxHis extends AbstractTable {

	static {
		init();
	}

	private TPtfIdxHis(){
		super.tableName = "ptf_idx_his";
	}

	private TPtfIdxHis(String aliasName){
		this();
		setAliasName(aliasName);
	}

	public static final TPtfIdxHis getInstance() {
		return new TPtfIdxHis();
	}

	public static final TPtfIdxHis getInstance(String aliasName) {
		return new TPtfIdxHis(aliasName);
	}

	private static Map<String, String> allFieldMap;
	private static final void init() {
		allFieldMap = new HashMap<String, String>();
		allFieldMap.put("ptfId", "ptf_id");
		allFieldMap.put("indexDate", "index_date");
		allFieldMap.put("isReal", "is_real");
		allFieldMap.put("ptfIndex", "ptf_index");
		allFieldMap.put("ptfVolatility", "ptf_volatility");
		allFieldMap.put("createTime", "create_time");
	}

	public String getFieldName(String javaFieldName) {
		return allFieldMap.get(javaFieldName);
	}

	public final TableField<Integer> all = new AllField<Integer>(this,  "*",null);

	public TableField<?> allField() {
		return all;
	}

	/**
	 * 组合id | int(11)
	 */
	public final TableField<Integer>  pk = new TableFieldImpl<Integer>(this,"ptf_id","ptfId","组合id");
	public final TableField<Integer> ptfId = new TableFieldImpl<Integer>(this,"ptf_id","ptfId","组合id");

	/**
	 * 指数日期 | date
	 */
	public final TableField<Date>  pk1 = new TableFieldImpl<Date>(this,"index_date","indexDate","指数日期");
	public final DateTableField<Date> indexDate = new DateTableFieldImpl<Date>(this,"index_date","indexDate","指数日期");

	/**
	 * 是否实盘 | tinyint(1)
	 */
	public final TableField<Boolean> isReal = new TableFieldImpl<Boolean>(this,"is_real","isReal","是否实盘");

	/**
	 * 组合指数 | decimal(10,4)
	 */
	public final TableField<Double> ptfIndex = new TableFieldImpl<Double>(this,"ptf_index","ptfIndex","组合指数");

	/**
	 * 组合的波动率 | decimal(10,4)
	 */
	public final TableField<Double> ptfVolatility = new TableFieldImpl<Double>(this,"ptf_volatility","ptfVolatility","组合的波动率");

	/**
	 * 创建时间 | datetime
	 */
	public final DateTableField<Date> createTime = new DateTableFieldImpl<Date>(this,"create_time","createTime","创建时间");

	private final TableField<?>[] allFields = new TableField<?>[] {ptfId,indexDate,isReal,ptfIndex,ptfVolatility,createTime};

	public TableField<?>[] getAllFields() {
		return allFields;
	}

	@SuppressWarnings("unchecked")
	public TableField<?> getPK() {
		return pk;
	}

	@SuppressWarnings("unchecked")
	public TableField<?> getLockVersion() {
		return null;
	}

	public final boolean isAutoGeneratedPK() {
		return false;
	}

	public final boolean isLockVersion() {
		return false;
	}

	public String toString() {
		return "TPtfIdxHis[table=ptf_idx_his]";
	}
}
