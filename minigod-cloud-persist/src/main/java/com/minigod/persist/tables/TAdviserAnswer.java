package com.minigod.persist.tables;
import com.minigod.db4j.table.AllField;
import com.minigod.db4j.table.AbstractTable;
import com.minigod.db4j.table.TableField;
import com.minigod.db4j.table.TableFieldImpl;
import java.util.HashMap;
import java.util.Map;
import java.util.Date;
import com.minigod.db4j.table.DateTableField;
import com.minigod.db4j.table.DateTableFieldImpl;

public class TAdviserAnswer extends AbstractTable {

	static {
		init();
	}

	private TAdviserAnswer(){
		super.tableName = "adviser_answer";
	}

	private TAdviserAnswer(String aliasName){
		this();
		setAliasName(aliasName);
	}

	public static final TAdviserAnswer getInstance() {
		return new TAdviserAnswer();
	}

	public static final TAdviserAnswer getInstance(String aliasName) {
		return new TAdviserAnswer(aliasName);
	}

	private static Map<String, String> allFieldMap;
	private static final void init() {
		allFieldMap = new HashMap<String, String>();
		allFieldMap.put("answerId", "answer_id");
		allFieldMap.put("questionId", "question_id");
		allFieldMap.put("questionUserId", "question_user_id");
		allFieldMap.put("answerUserId", "answer_user_id");
		allFieldMap.put("content", "content");
		allFieldMap.put("isSatisfy", "is_satisfy");
		allFieldMap.put("unsatisfyType", "unsatisfy_type");
		allFieldMap.put("unsatisfyReason", "unsatisfy_reason");
		allFieldMap.put("isRead", "is_read");
		allFieldMap.put("isStatus", "is_status");
		allFieldMap.put("createTime", "create_time");
		allFieldMap.put("updateTime", "update_time");
	}

	public String getFieldName(String javaFieldName) {
		return allFieldMap.get(javaFieldName);
	}

	public final TableField<Integer> all = new AllField<Integer>(this,  "*",null);

	public TableField<?> allField() {
		return all;
	}

	/**
	 * 答案ID | int(20)
	 */
	public final TableField<Integer>  pk = new TableFieldImpl<Integer>(this,"answer_id","answerId","答案ID");
	public final TableField<Integer> answerId = new TableFieldImpl<Integer>(this,"answer_id","answerId","答案ID");

	/**
	 * 问题id | int(20)
	 */
	public final TableField<Integer> questionId = new TableFieldImpl<Integer>(this,"question_id","questionId","问题id");

	/**
	 * 提问用户id | int(20)
	 */
	public final TableField<Integer> questionUserId = new TableFieldImpl<Integer>(this,"question_user_id","questionUserId","提问用户id");

	/**
	 * 回答用户id | int(20)
	 */
	public final TableField<Integer> answerUserId = new TableFieldImpl<Integer>(this,"answer_user_id","answerUserId","回答用户id");

	/**
	 * 答案内容 | varchar(1500)
	 */
	public final TableField<String> content = new TableFieldImpl<String>(this,"content","content","答案内容");

	/**
	 * 评价，0不满意 1满意，默认空 | tinyint(4)
	 */
	public final TableField<Integer> isSatisfy = new TableFieldImpl<Integer>(this,"is_satisfy","isSatisfy","评价，0不满意 1满意，默认空");

	/**
	 * 不满意类型 | tinyint(4)
	 */
	public final TableField<Integer> unsatisfyType = new TableFieldImpl<Integer>(this,"unsatisfy_type","unsatisfyType","不满意类型");

	/**
	 * 若不满意类型为其它则记录不满意原因 | varchar(255)
	 */
	public final TableField<String> unsatisfyReason = new TableFieldImpl<String>(this,"unsatisfy_reason","unsatisfyReason","若不满意类型为其它则记录不满意原因");

	/**
	 * 是否已读，默认0未读，1已读 。  对于提问者而言未读需打点  | tinyint(1)
	 */
	public final TableField<Boolean> isRead = new TableFieldImpl<Boolean>(this,"is_read","isRead","是否已读，默认0未读，1已读 。  对于提问者而言未读需打点 ");

	/**
	 * 记录状态 0-无效，默认1 | tinyint(1)
	 */
	public final TableField<Boolean> isStatus = new TableFieldImpl<Boolean>(this,"is_status","isStatus","记录状态 0-无效，默认1");

	/**
	 * 创建时间 回答时间 | datetime
	 */
	public final DateTableField<Date> createTime = new DateTableFieldImpl<Date>(this,"create_time","createTime","创建时间 回答时间");

	/**
	 * 修改时间 | datetime
	 */
	public final DateTableField<Date> updateTime = new DateTableFieldImpl<Date>(this,"update_time","updateTime","修改时间");

	private final TableField<?>[] allFields = new TableField<?>[] {answerId,questionId,questionUserId,answerUserId,content,isSatisfy,unsatisfyType,unsatisfyReason,isRead,isStatus,createTime,updateTime};

	public TableField<?>[] getAllFields() {
		return allFields;
	}

	@SuppressWarnings("unchecked")
	public TableField<?> getPK() {
		return pk;
	}

	@SuppressWarnings("unchecked")
	public TableField<?> getLockVersion() {
		return null;
	}

	public final boolean isAutoGeneratedPK() {
		return true;
	}

	public final boolean isLockVersion() {
		return false;
	}

	public String toString() {
		return "TAdviserAnswer[table=adviser_answer]";
	}
}
