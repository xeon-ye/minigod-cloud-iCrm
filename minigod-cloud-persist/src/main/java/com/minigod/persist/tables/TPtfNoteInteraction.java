package com.minigod.persist.tables;
import com.minigod.db4j.table.AllField;
import com.minigod.db4j.table.AbstractTable;
import com.minigod.db4j.table.TableField;
import com.minigod.db4j.table.TableFieldImpl;
import java.util.HashMap;
import java.util.Map;
import java.util.Date;
import com.minigod.db4j.table.DateTableField;
import com.minigod.db4j.table.DateTableFieldImpl;

public class TPtfNoteInteraction extends AbstractTable {

	static {
		init();
	}

	private TPtfNoteInteraction(){
		super.tableName = "ptf_note_interaction";
	}

	private TPtfNoteInteraction(String aliasName){
		this();
		setAliasName(aliasName);
	}

	public static final TPtfNoteInteraction getInstance() {
		return new TPtfNoteInteraction();
	}

	public static final TPtfNoteInteraction getInstance(String aliasName) {
		return new TPtfNoteInteraction(aliasName);
	}

	private static Map<String, String> allFieldMap;
	private static final void init() {
		allFieldMap = new HashMap<String, String>();
		allFieldMap.put("interId", "inter_id");
		allFieldMap.put("clientReqId", "client_req_id");
		allFieldMap.put("ptfNoteId", "ptf_note_id");
		allFieldMap.put("interType", "inter_type");
		allFieldMap.put("fromUser", "from_user");
		allFieldMap.put("toUser", "to_user");
		allFieldMap.put("content", "content");
		allFieldMap.put("isStatus", "is_status");
		allFieldMap.put("createTime", "create_time");
		allFieldMap.put("updateTime", "update_time");
		allFieldMap.put("noteUser", "note_user");
	}

	public String getFieldName(String javaFieldName) {
		return allFieldMap.get(javaFieldName);
	}

	public final TableField<Integer> all = new AllField<Integer>(this,  "*",null);

	public TableField<?> allField() {
		return all;
	}

	/**
	 * 互动ID | int(11)
	 */
	public final TableField<Integer>  pk = new TableFieldImpl<Integer>(this,"inter_id","interId","互动ID");
	public final TableField<Integer> interId = new TableFieldImpl<Integer>(this,"inter_id","interId","互动ID");

	/**
	 *  | varchar(50)
	 */
	public final TableField<String> clientReqId = new TableFieldImpl<String>(this,"client_req_id","clientReqId","");

	/**
	 * 日历ID | int(11)
	 */
	public final TableField<Integer> ptfNoteId = new TableFieldImpl<Integer>(this,"ptf_note_id","ptfNoteId","日历ID");

	/**
	 * 互动类型。R-回复（reply）；L-点赞（like） | char(1)
	 */
	public final TableField<String> interType = new TableFieldImpl<String>(this,"inter_type","interType","互动类型。R-回复（reply）；L-点赞（like）");

	/**
	 * 发表用户ID | int(11)
	 */
	public final TableField<Integer> fromUser = new TableFieldImpl<Integer>(this,"from_user","fromUser","发表用户ID");

	/**
	 * 回复对象ID | int(11)
	 */
	public final TableField<Integer> toUser = new TableFieldImpl<Integer>(this,"to_user","toUser","回复对象ID");

	/**
	 *  | varchar(500)
	 */
	public final TableField<String> content = new TableFieldImpl<String>(this,"content","content","");

	/**
	 * 记录状态 | tinyint(1)
	 */
	public final TableField<Boolean> isStatus = new TableFieldImpl<Boolean>(this,"is_status","isStatus","记录状态");

	/**
	 * 创建时间 | datetime
	 */
	public final DateTableField<Date> createTime = new DateTableFieldImpl<Date>(this,"create_time","createTime","创建时间");

	/**
	 * 修改时间 | datetime
	 */
	public final DateTableField<Date> updateTime = new DateTableFieldImpl<Date>(this,"update_time","updateTime","修改时间");

	/**
	 * 主贴发表人ID | int(11)
	 */
	public final TableField<Integer> noteUser = new TableFieldImpl<Integer>(this,"note_user","noteUser","主贴发表人ID");

	private final TableField<?>[] allFields = new TableField<?>[] {interId,clientReqId,ptfNoteId,interType,fromUser,toUser,content,isStatus,createTime,updateTime,noteUser};

	public TableField<?>[] getAllFields() {
		return allFields;
	}

	@SuppressWarnings("unchecked")
	public TableField<?> getPK() {
		return pk;
	}

	@SuppressWarnings("unchecked")
	public TableField<?> getLockVersion() {
		return null;
	}

	public final boolean isAutoGeneratedPK() {
		return true;
	}

	public final boolean isLockVersion() {
		return false;
	}

	public String toString() {
		return "TPtfNoteInteraction[table=ptf_note_interaction]";
	}
}
