package com.minigod.persist.tables;
import com.minigod.db4j.table.AllField;
import com.minigod.db4j.table.AbstractTable;
import com.minigod.db4j.table.TableField;
import com.minigod.db4j.table.TableFieldImpl;
import java.util.HashMap;
import java.util.Map;

public class TGrmField extends AbstractTable {

	static {
		init();
	}

	private TGrmField(){
		super.tableName = "grm_field";
	}

	private TGrmField(String aliasName){
		this();
		setAliasName(aliasName);
	}

	public static final TGrmField getInstance() {
		return new TGrmField();
	}

	public static final TGrmField getInstance(String aliasName) {
		return new TGrmField(aliasName);
	}

	private static Map<String, String> allFieldMap;
	private static final void init() {
		allFieldMap = new HashMap<String, String>();
		allFieldMap.put("fieldId", "field_id");
		allFieldMap.put("fieldCode", "field_code");
		allFieldMap.put("fieldName", "field_name");
		allFieldMap.put("dictionaryCode", "dictionary_code");
		allFieldMap.put("fieldType", "field_type");
		allFieldMap.put("fieldDeci", "field_deci");
		allFieldMap.put("extFieldCode", "ext_field_code");
	}

	public String getFieldName(String javaFieldName) {
		return allFieldMap.get(javaFieldName);
	}

	public final TableField<Integer> all = new AllField<Integer>(this,  "*",null);

	public TableField<?> allField() {
		return all;
	}

	/**
	 *  | int(11)
	 */
	public final TableField<Integer>  pk = new TableFieldImpl<Integer>(this,"field_id","fieldId","");
	public final TableField<Integer> fieldId = new TableFieldImpl<Integer>(this,"field_id","fieldId","");

	/**
	 *  | varchar(32)
	 */
	public final TableField<String> fieldCode = new TableFieldImpl<String>(this,"field_code","fieldCode","");

	/**
	 *  | varchar(32)
	 */
	public final TableField<String> fieldName = new TableFieldImpl<String>(this,"field_name","fieldName","");

	/**
	 *  | varchar(8)
	 */
	public final TableField<String> dictionaryCode = new TableFieldImpl<String>(this,"dictionary_code","dictionaryCode","");

	/**
	 *  | varchar(32)
	 */
	public final TableField<String> fieldType = new TableFieldImpl<String>(this,"field_type","fieldType","");

	/**
	 *  | smallint(6)
	 */
	public final TableField<Integer> fieldDeci = new TableFieldImpl<Integer>(this,"field_deci","fieldDeci","");

	/**
	 *  | varchar(32)
	 */
	public final TableField<String> extFieldCode = new TableFieldImpl<String>(this,"ext_field_code","extFieldCode","");

	private final TableField<?>[] allFields = new TableField<?>[] {fieldId,fieldCode,fieldName,dictionaryCode,fieldType,fieldDeci,extFieldCode};

	public TableField<?>[] getAllFields() {
		return allFields;
	}

	@SuppressWarnings("unchecked")
	public TableField<?> getPK() {
		return pk;
	}

	@SuppressWarnings("unchecked")
	public TableField<?> getLockVersion() {
		return null;
	}

	public final boolean isAutoGeneratedPK() {
		return true;
	}

	public final boolean isLockVersion() {
		return false;
	}

	public String toString() {
		return "TGrmField[table=grm_field]";
	}
}
