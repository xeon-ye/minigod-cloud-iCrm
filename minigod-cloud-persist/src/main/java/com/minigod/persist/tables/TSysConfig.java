package com.minigod.persist.tables;
import com.minigod.db4j.table.AllField;
import com.minigod.db4j.table.AbstractTable;
import com.minigod.db4j.table.TableField;
import com.minigod.db4j.table.TableFieldImpl;
import java.util.HashMap;
import java.util.Map;
import java.util.Date;
import com.minigod.db4j.table.DateTableField;
import com.minigod.db4j.table.DateTableFieldImpl;

public class TSysConfig extends AbstractTable {

	static {
		init();
	}

	private TSysConfig(){
		super.tableName = "sys_config";
	}

	private TSysConfig(String aliasName){
		this();
		setAliasName(aliasName);
	}

	public static final TSysConfig getInstance() {
		return new TSysConfig();
	}

	public static final TSysConfig getInstance(String aliasName) {
		return new TSysConfig(aliasName);
	}

	private static Map<String, String> allFieldMap;
	private static final void init() {
		allFieldMap = new HashMap<String, String>();
		allFieldMap.put("configId", "config_id");
		allFieldMap.put("moduleName", "module_name");
		allFieldMap.put("keyName", "key_name");
		allFieldMap.put("remark", "remark");
		allFieldMap.put("keyValue", "key_value");
		allFieldMap.put("isStatus", "is_status");
		allFieldMap.put("createTime", "create_time");
		allFieldMap.put("updateTime", "update_time");
		allFieldMap.put("updVersion", "upd_version");
	}

	public String getFieldName(String javaFieldName) {
		return allFieldMap.get(javaFieldName);
	}

	public final TableField<Integer> all = new AllField<Integer>(this,  "*",null);

	public TableField<?> allField() {
		return all;
	}

	/**
	 * 配置ID | int(11)
	 */
	public final TableField<Integer>  pk = new TableFieldImpl<Integer>(this,"config_id","configId","配置ID");
	public final TableField<Integer> configId = new TableFieldImpl<Integer>(this,"config_id","configId","配置ID");

	/**
	 *  | varchar(100)
	 */
	public final TableField<String> moduleName = new TableFieldImpl<String>(this,"module_name","moduleName","");

	/**
	 *  | varchar(100)
	 */
	public final TableField<String> keyName = new TableFieldImpl<String>(this,"key_name","keyName","");

	/**
	 *  | varchar(500)
	 */
	public final TableField<String> remark = new TableFieldImpl<String>(this,"remark","remark","");

	/**
	 *  | varchar(255)
	 */
	public final TableField<String> keyValue = new TableFieldImpl<String>(this,"key_value","keyValue","");

	/**
	 * 状态(0停用,默认1正常使用) | tinyint(1)
	 */
	public final TableField<Boolean> isStatus = new TableFieldImpl<Boolean>(this,"is_status","isStatus","状态(0停用,默认1正常使用)");

	/**
	 * 记录创建时间 | datetime
	 */
	public final DateTableField<Date> createTime = new DateTableFieldImpl<Date>(this,"create_time","createTime","记录创建时间");

	/**
	 * 记录最后修改时间 | datetime
	 */
	public final DateTableField<Date> updateTime = new DateTableFieldImpl<Date>(this,"update_time","updateTime","记录最后修改时间");

	/**
	 *  | bigint(11)
	 */
	public final TableField<Long> updVersion = new TableFieldImpl<Long>(this,"upd_version","updVersion","");

	private final TableField<?>[] allFields = new TableField<?>[] {configId,moduleName,keyName,remark,keyValue,isStatus,createTime,updateTime,updVersion};

	public TableField<?>[] getAllFields() {
		return allFields;
	}

	@SuppressWarnings("unchecked")
	public TableField<?> getPK() {
		return pk;
	}

	@SuppressWarnings("unchecked")
	public TableField<?> getLockVersion() {
		return null;
	}

	public final boolean isAutoGeneratedPK() {
		return true;
	}

	public final boolean isLockVersion() {
		return false;
	}

	public String toString() {
		return "TSysConfig[table=sys_config]";
	}
}
