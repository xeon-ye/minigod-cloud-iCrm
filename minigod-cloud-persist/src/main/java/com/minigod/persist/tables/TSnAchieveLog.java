package com.minigod.persist.tables;
import com.minigod.db4j.table.AllField;
import com.minigod.db4j.table.AbstractTable;
import com.minigod.db4j.table.TableField;
import com.minigod.db4j.table.TableFieldImpl;
import java.util.HashMap;
import java.util.Map;
import java.util.Date;
import com.minigod.db4j.table.DateTableField;
import com.minigod.db4j.table.DateTableFieldImpl;

public class TSnAchieveLog extends AbstractTable {

	static {
		init();
	}

	private TSnAchieveLog(){
		super.tableName = "sn_achieve_log";
	}

	private TSnAchieveLog(String aliasName){
		this();
		setAliasName(aliasName);
	}

	public static final TSnAchieveLog getInstance() {
		return new TSnAchieveLog();
	}

	public static final TSnAchieveLog getInstance(String aliasName) {
		return new TSnAchieveLog(aliasName);
	}

	private static Map<String, String> allFieldMap;
	private static final void init() {
		allFieldMap = new HashMap<String, String>();
		allFieldMap.put("achieveLogId", "achieve_log_id");
		allFieldMap.put("userId", "user_id");
		allFieldMap.put("taskId", "task_id");
		allFieldMap.put("taskName", "task_name");
		allFieldMap.put("coin", "coin");
		allFieldMap.put("experience", "experience");
		allFieldMap.put("createTime", "create_time");
	}

	public String getFieldName(String javaFieldName) {
		return allFieldMap.get(javaFieldName);
	}

	public final TableField<Integer> all = new AllField<Integer>(this,  "*",null);

	public TableField<?> allField() {
		return all;
	}

	/**
	 *  | int(11)
	 */
	public final TableField<Integer>  pk = new TableFieldImpl<Integer>(this,"achieve_log_id","achieveLogId","");
	public final TableField<Integer> achieveLogId = new TableFieldImpl<Integer>(this,"achieve_log_id","achieveLogId","");

	/**
	 *  | int(11)
	 */
	public final TableField<Integer> userId = new TableFieldImpl<Integer>(this,"user_id","userId","");

	/**
	 * 任务id | bigint(11)
	 */
	public final TableField<Long> taskId = new TableFieldImpl<Long>(this,"task_id","taskId","任务id");

	/**
	 * 任务名称 | varchar(128)
	 */
	public final TableField<String> taskName = new TableFieldImpl<String>(this,"task_name","taskName","任务名称");

	/**
	 * 任务完成可以领取的金币值 | int(11)
	 */
	public final TableField<Integer> coin = new TableFieldImpl<Integer>(this,"coin","coin","任务完成可以领取的金币值");

	/**
	 * 任务完成可以领取的经验值 | int(11)
	 */
	public final TableField<Integer> experience = new TableFieldImpl<Integer>(this,"experience","experience","任务完成可以领取的经验值");

	/**
	 *  | datetime
	 */
	public final DateTableField<Date> createTime = new DateTableFieldImpl<Date>(this,"create_time","createTime","");

	private final TableField<?>[] allFields = new TableField<?>[] {achieveLogId,userId,taskId,taskName,coin,experience,createTime};

	public TableField<?>[] getAllFields() {
		return allFields;
	}

	@SuppressWarnings("unchecked")
	public TableField<?> getPK() {
		return pk;
	}

	@SuppressWarnings("unchecked")
	public TableField<?> getLockVersion() {
		return null;
	}

	public final boolean isAutoGeneratedPK() {
		return true;
	}

	public final boolean isLockVersion() {
		return false;
	}

	public String toString() {
		return "TSnAchieveLog[table=sn_achieve_log]";
	}
}
