package com.minigod.persist.tables;
import com.minigod.db4j.table.AllField;
import com.minigod.db4j.table.AbstractTable;
import com.minigod.db4j.table.TableField;
import com.minigod.db4j.table.TableFieldImpl;
import java.util.HashMap;
import java.util.Map;

public class TStkPosition extends AbstractTable {

	static {
		init();
	}

	private TStkPosition(){
		super.tableName = "stk_position";
	}

	private TStkPosition(String aliasName){
		this();
		setAliasName(aliasName);
	}

	public static final TStkPosition getInstance() {
		return new TStkPosition();
	}

	public static final TStkPosition getInstance(String aliasName) {
		return new TStkPosition(aliasName);
	}

	private static Map<String, String> allFieldMap;
	private static final void init() {
		allFieldMap = new HashMap<String, String>();
		allFieldMap.put("positionId", "position_id");
		allFieldMap.put("stkcode", "stkcode");
		allFieldMap.put("stkname", "stkname");
		allFieldMap.put("stkbal", "stkbal");
		allFieldMap.put("stkavl", "stkavl");
		allFieldMap.put("stkbuy", "stkbuy");
		allFieldMap.put("stksale", "stksale");
		allFieldMap.put("costprice", "costprice");
		allFieldMap.put("inputid", "inputid");
		allFieldMap.put("secuid", "secuid");
		allFieldMap.put("market", "market");
		allFieldMap.put("profitprice", "profitprice");
		allFieldMap.put("poststr", "poststr");
	}

	public String getFieldName(String javaFieldName) {
		return allFieldMap.get(javaFieldName);
	}

	public final TableField<Integer> all = new AllField<Integer>(this,  "*",null);

	public TableField<?> allField() {
		return all;
	}

	/**
	 *  | int(11)
	 */
	public final TableField<Integer>  pk = new TableFieldImpl<Integer>(this,"position_id","positionId","");
	public final TableField<Integer> positionId = new TableFieldImpl<Integer>(this,"position_id","positionId","");

	/**
	 *  | varchar(20)
	 */
	public final TableField<String> stkcode = new TableFieldImpl<String>(this,"stkcode","stkcode","");

	/**
	 *  | varchar(20)
	 */
	public final TableField<String> stkname = new TableFieldImpl<String>(this,"stkname","stkname","");

	/**
	 *  | decimal(16,4)
	 */
	public final TableField<Double> stkbal = new TableFieldImpl<Double>(this,"stkbal","stkbal","");

	/**
	 *  | decimal(16,4)
	 */
	public final TableField<Double> stkavl = new TableFieldImpl<Double>(this,"stkavl","stkavl","");

	/**
	 *  | decimal(16,4)
	 */
	public final TableField<Double> stkbuy = new TableFieldImpl<Double>(this,"stkbuy","stkbuy","");

	/**
	 *  | decimal(16,4)
	 */
	public final TableField<Double> stksale = new TableFieldImpl<Double>(this,"stksale","stksale","");

	/**
	 *  | decimal(16,4)
	 */
	public final TableField<Double> costprice = new TableFieldImpl<Double>(this,"costprice","costprice","");

	/**
	 *  | varchar(20)
	 */
	public final TableField<String> inputid = new TableFieldImpl<String>(this,"inputid","inputid","");

	/**
	 *  | varchar(20)
	 */
	public final TableField<String> secuid = new TableFieldImpl<String>(this,"secuid","secuid","");

	/**
	 *  | varchar(1)
	 */
	public final TableField<String> market = new TableFieldImpl<String>(this,"market","market","");

	/**
	 *  | decimal(16,4)
	 */
	public final TableField<Double> profitprice = new TableFieldImpl<Double>(this,"profitprice","profitprice","");

	/**
	 *  | varchar(20)
	 */
	public final TableField<String> poststr = new TableFieldImpl<String>(this,"poststr","poststr","");

	private final TableField<?>[] allFields = new TableField<?>[] {positionId,stkcode,stkname,stkbal,stkavl,stkbuy,stksale,costprice,inputid,secuid,market,profitprice,poststr};

	public TableField<?>[] getAllFields() {
		return allFields;
	}

	@SuppressWarnings("unchecked")
	public TableField<?> getPK() {
		return pk;
	}

	@SuppressWarnings("unchecked")
	public TableField<?> getLockVersion() {
		return null;
	}

	public final boolean isAutoGeneratedPK() {
		return true;
	}

	public final boolean isLockVersion() {
		return false;
	}

	public String toString() {
		return "TStkPosition[table=stk_position]";
	}
}
