package com.minigod.persist.tables;
import com.minigod.db4j.table.AllField;
import com.minigod.db4j.table.AbstractTable;
import com.minigod.db4j.table.TableField;
import com.minigod.db4j.table.TableFieldImpl;
import java.util.HashMap;
import java.util.Map;
import java.util.Date;
import com.minigod.db4j.table.DateTableField;
import com.minigod.db4j.table.DateTableFieldImpl;

public class TOpenUserOffline extends AbstractTable {

	static {
		init();
	}

	private TOpenUserOffline(){
		super.tableName = "open_user_offline";
	}

	private TOpenUserOffline(String aliasName){
		this();
		setAliasName(aliasName);
	}

	public static final TOpenUserOffline getInstance() {
		return new TOpenUserOffline();
	}

	public static final TOpenUserOffline getInstance(String aliasName) {
		return new TOpenUserOffline(aliasName);
	}

	private static Map<String, String> allFieldMap;
	private static final void init() {
		allFieldMap = new HashMap<String, String>();
		allFieldMap.put("id", "id");
		allFieldMap.put("userId", "user_id");
		allFieldMap.put("info", "info");
		allFieldMap.put("pushrecved", "pushrecved");
		allFieldMap.put("state", "state");
		allFieldMap.put("createTime", "create_time");
		allFieldMap.put("updateTime", "update_time");
	}

	public String getFieldName(String javaFieldName) {
		return allFieldMap.get(javaFieldName);
	}

	public final TableField<Integer> all = new AllField<Integer>(this,  "*",null);

	public TableField<?> allField() {
		return all;
	}

	/**
	 * 主键 | bigint(20)
	 */
	public final TableField<Long>  pk = new TableFieldImpl<Long>(this,"id","id","主键");
	public final TableField<Long> id = new TableFieldImpl<Long>(this,"id","id","主键");

	/**
	 * 用户ID | bigint(20)
	 */
	public final TableField<Long> userId = new TableFieldImpl<Long>(this,"user_id","userId","用户ID");

	/**
	 * 线下开户申请信息 | varchar(4000)
	 */
	public final TableField<String> info = new TableFieldImpl<String>(this,"info","info","线下开户申请信息");

	/**
	 * 回调状态(0:未回调 1:成功 2:失败) | int(2)
	 */
	public final TableField<Integer> pushrecved = new TableFieldImpl<Integer>(this,"pushrecved","pushrecved","回调状态(0:未回调 1:成功 2:失败)");

	/**
	 * 申请状态(0:未申请 1:已申请) | int(2)
	 */
	public final TableField<Integer> state = new TableFieldImpl<Integer>(this,"state","state","申请状态(0:未申请 1:已申请)");

	/**
	 * 创建时间 | datetime
	 */
	public final DateTableField<Date> createTime = new DateTableFieldImpl<Date>(this,"create_time","createTime","创建时间");

	/**
	 * 修改时间 | datetime
	 */
	public final DateTableField<Date> updateTime = new DateTableFieldImpl<Date>(this,"update_time","updateTime","修改时间");

	private final TableField<?>[] allFields = new TableField<?>[] {id,userId,info,pushrecved,state,createTime,updateTime};

	public TableField<?>[] getAllFields() {
		return allFields;
	}

	@SuppressWarnings("unchecked")
	public TableField<?> getPK() {
		return pk;
	}

	@SuppressWarnings("unchecked")
	public TableField<?> getLockVersion() {
		return null;
	}

	public final boolean isAutoGeneratedPK() {
		return true;
	}

	public final boolean isLockVersion() {
		return false;
	}

	public String toString() {
		return "TOpenUserOffline[table=open_user_offline]";
	}
}
