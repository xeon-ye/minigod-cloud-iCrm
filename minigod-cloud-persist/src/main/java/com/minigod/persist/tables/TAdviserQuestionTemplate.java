package com.minigod.persist.tables;

import com.minigod.db4j.table.AbstractTable;
import com.minigod.db4j.table.AllField;
import com.minigod.db4j.table.DateTableField;
import com.minigod.db4j.table.DateTableFieldImpl;
import com.minigod.db4j.table.TableField;
import com.minigod.db4j.table.TableFieldImpl;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

public class TAdviserQuestionTemplate extends AbstractTable {

	static {
		init();
	}

	private TAdviserQuestionTemplate(){
		super.tableName = "adviser_question_template";
	}

	private TAdviserQuestionTemplate(String aliasName){
		this();
		setAliasName(aliasName);
	}

	public static final TAdviserQuestionTemplate getInstance() {
		return new TAdviserQuestionTemplate();
	}

	public static final TAdviserQuestionTemplate getInstance(String aliasName) {
		return new TAdviserQuestionTemplate(aliasName);
	}

	private static Map<String, String> allFieldMap;
	private static final void init() {
		allFieldMap = new HashMap<String, String>();
		allFieldMap.put("questionTemplateId", "question_template_id");
		allFieldMap.put("type", "type");
		allFieldMap.put("content", "content");
		allFieldMap.put("sort", "sort");
		allFieldMap.put("createTime", "createTime");
		allFieldMap.put("updateTime", "updateTime");
		allFieldMap.put("isStatus", "is_status");
	}

	public String getFieldName(String javaFieldName) {
		return allFieldMap.get(javaFieldName);
	}

	public final TableField<Integer> all = new AllField<Integer>(this,  "*",null);

	public TableField<?> allField() {
		return all;
	}

	/**
	 * ID | int(11)
	 */
	public final TableField<Integer>  pk = new TableFieldImpl<Integer>(this,"question_template_id","questionTemplateId","ID");
	public final TableField<Integer> questionTemplateId = new TableFieldImpl<Integer>(this,"question_template_id","questionTemplateId","ID");

	/**
	 * 类型 | tinyint(4)
	 */
	public final TableField<Integer> type = new TableFieldImpl<Integer>(this,"type","type","类型");

	/**
	 * 内容 | varchar(500)
	 */
	public final TableField<String> content = new TableFieldImpl<String>(this,"content","content","内容");

	/**
	 *  | int(11)
	 */
	public final TableField<Integer> sort = new TableFieldImpl<Integer>(this,"sort","sort","");

	/**
	 * 创建时间 | datetime
	 */
	public final DateTableField<Date> createTime = new DateTableFieldImpl<Date>(this,"createTime","createTime","创建时间");

	/**
	 * 修改时间 | datetime
	 */
	public final DateTableField<Date> updateTime = new DateTableFieldImpl<Date>(this,"updateTime","updateTime","修改时间");

	/**
	 * 状态 | tinyint(1)
	 */
	public final TableField<Boolean> isStatus = new TableFieldImpl<Boolean>(this,"is_status","isStatus","状态");

	private final TableField<?>[] allFields = new TableField<?>[] {questionTemplateId,type,content,sort,createTime,updateTime,isStatus};

	public TableField<?>[] getAllFields() {
		return allFields;
	}

	@SuppressWarnings("unchecked")
	public TableField<?> getPK() {
		return pk;
	}

	@SuppressWarnings("unchecked")
	public TableField<?> getLockVersion() {
		return null;
	}

	public final boolean isAutoGeneratedPK() {
		return true;
	}

	public final boolean isLockVersion() {
		return false;
	}

	public String toString() {
		return "TAdviserQuestionTemplate[table=adviser_question_template]";
	}
}
