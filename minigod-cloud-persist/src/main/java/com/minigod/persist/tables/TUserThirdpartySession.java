package com.minigod.persist.tables;
import com.minigod.db4j.table.AllField;
import com.minigod.db4j.table.AbstractTable;
import com.minigod.db4j.table.TableField;
import com.minigod.db4j.table.TableFieldImpl;
import java.util.HashMap;
import java.util.Map;
import java.util.Date;
import com.minigod.db4j.table.DateTableField;
import com.minigod.db4j.table.DateTableFieldImpl;

public class TUserThirdpartySession extends AbstractTable {

	static {
		init();
	}

	private TUserThirdpartySession(){
		super.tableName = "user_thirdparty_session";
	}

	private TUserThirdpartySession(String aliasName){
		this();
		setAliasName(aliasName);
	}

	public static final TUserThirdpartySession getInstance() {
		return new TUserThirdpartySession();
	}

	public static final TUserThirdpartySession getInstance(String aliasName) {
		return new TUserThirdpartySession(aliasName);
	}

	private static Map<String, String> allFieldMap;
	private static final void init() {
		allFieldMap = new HashMap<String, String>();
		allFieldMap.put("thirdpartySessionId", "thirdparty_session_id");
		allFieldMap.put("sessionType", "session_type");
		allFieldMap.put("userId", "user_id");
		allFieldMap.put("userType", "user_type");
		allFieldMap.put("deviceId", "device_id");
		allFieldMap.put("sessionCode", "session_code");
		allFieldMap.put("expireTime", "expire_time");
		allFieldMap.put("msg", "remark");
		allFieldMap.put("isStatus", "is_status");
		allFieldMap.put("source", "source");
		allFieldMap.put("clientIp", "client_ip");
		allFieldMap.put("serverIp", "server_ip");
		allFieldMap.put("createTime", "create_time");
		allFieldMap.put("updateTime", "update_time");
	}

	public String getFieldName(String javaFieldName) {
		return allFieldMap.get(javaFieldName);
	}

	public final TableField<Integer> all = new AllField<Integer>(this,  "*",null);

	public TableField<?> allField() {
		return all;
	}

	/**
	 * 会话的ID | int(11)
	 */
	public final TableField<Integer>  pk = new TableFieldImpl<Integer>(this,"thirdparty_session_id","thirdpartySessionId","会话的ID");
	public final TableField<Integer> thirdpartySessionId = new TableFieldImpl<Integer>(this,"thirdparty_session_id","thirdpartySessionId","会话的ID");

	/**
	 * 会话类型1、代表正常会话，2、代表互踢会话 | tinyint(4)
	 */
	public final TableField<Integer> sessionType = new TableFieldImpl<Integer>(this,"session_type","sessionType","会话类型1、代表正常会话，2、代表互踢会话");

	/**
	 * 用户ID | int(11)
	 */
	public final TableField<Integer> userId = new TableFieldImpl<Integer>(this,"user_id","userId","用户ID");

	/**
	 * 1认证登录用户；2交易用户。 | tinyint(4)
	 */
	public final TableField<Integer> userType = new TableFieldImpl<Integer>(this,"user_type","userType","1认证登录用户；2交易用户。");

	/**
	 * 设备ID，目前存放的是移动端app的设备编号，其他应用如pc和浏览器待商榷 | varchar(20)
	 */
	public final TableField<String> deviceId = new TableFieldImpl<String>(this,"device_id","deviceId","设备ID，目前存放的是移动端app的设备编号，其他应用如pc和浏览器待商榷");

	/**
	 * 用于标识用户的会话 | varchar(50)
	 */
	public final TableField<String> sessionCode = new TableFieldImpl<String>(this,"session_code","token","用于标识用户的会话");

	/**
	 * session过期时间 | datetime
	 */
	public final DateTableField<Date> expireTime = new DateTableFieldImpl<Date>(this,"expire_time","expireTime","session过期时间");

	/**
	 *  | varchar(200)
	 */
	public final TableField<String> msg = new TableFieldImpl<String>(this,"remark","remark","");

	/**
	 * session是否有效(1有效,0无效) | tinyint(1)
	 */
	public final TableField<Boolean> isStatus = new TableFieldImpl<Boolean>(this,"is_status","isStatus","session是否有效(1有效,0无效)");

	/**
	 * session来源，默认是社区，还有其他如IWEB/BCAPP | varchar(20)
	 */
	public final TableField<String> source = new TableFieldImpl<String>(this,"source","source","session来源，默认是社区，还有其他如IWEB/BCAPP");

	/**
	 * 客户端IP，记录客户端请求ip | varchar(15)
	 */
	public final TableField<String> clientIp = new TableFieldImpl<String>(this,"client_ip","clientIp","客户端IP，记录客户端请求ip");

	/**
	 * 服务端IP，用于接口发送消息的服务器 | varchar(15)
	 */
	public final TableField<String> serverIp = new TableFieldImpl<String>(this,"server_ip","serverIp","服务端IP，用于接口发送消息的服务器");

	/**
	 * 创建时间 | datetime
	 */
	public final DateTableField<Date> createTime = new DateTableFieldImpl<Date>(this,"create_time","createTime","创建时间");

	/**
	 * 最后修改时间 | datetime
	 */
	public final DateTableField<Date> updateTime = new DateTableFieldImpl<Date>(this,"update_time","updateTime","最后修改时间");

	private final TableField<?>[] allFields = new TableField<?>[] {thirdpartySessionId,sessionType,userId,userType,deviceId,sessionCode,expireTime,msg,isStatus,source,clientIp,serverIp,createTime,updateTime};

	public TableField<?>[] getAllFields() {
		return allFields;
	}

	@SuppressWarnings("unchecked")
	public TableField<?> getPK() {
		return pk;
	}

	@SuppressWarnings("unchecked")
	public TableField<?> getLockVersion() {
		return null;
	}

	public final boolean isAutoGeneratedPK() {
		return true;
	}

	public final boolean isLockVersion() {
		return false;
	}

	public String toString() {
		return "TUserThirdpartySession[table=user_thirdparty_session]";
	}
}
