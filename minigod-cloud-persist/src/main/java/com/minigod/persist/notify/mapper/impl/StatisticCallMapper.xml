<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.minigod.persist.notify.mapper.StatisticCallMapper">
    <resultMap id="BaseResultMap" type="com.minigod.protocol.notify.model.StatisticCall">
        <!--@mbg.generated-->
        <!--@Table statistic_call-->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="module_type" jdbcType="CHAR" property="moduleType"/>
        <result column="limit" jdbcType="INTEGER" property="limit"/>
        <result column="use_numb" jdbcType="INTEGER" property="useNumb"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        id, module_type, `limit`, use_numb
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        <!--@mbg.generated-->
    select 

        <include refid="Base_Column_List"/>

    from statistic_call
    where id = #{id,jdbcType=INTEGER}

    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        <!--@mbg.generated-->
    delete from statistic_call
    where id = #{id,jdbcType=INTEGER}

    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.minigod.protocol.notify.model.StatisticCall"
            useGeneratedKeys="true">
        <!--@mbg.generated-->
    insert into statistic_call (module_type, `limit`, use_numb
      )
    values (#{moduleType,jdbcType=CHAR}, #{limit,jdbcType=INTEGER}, #{useNumb,jdbcType=INTEGER}
      )

    </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="id"
            parameterType="com.minigod.protocol.notify.model.StatisticCall" useGeneratedKeys="true">
        <!--@mbg.generated-->
    insert into statistic_call

        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="moduleType != null">
                module_type,

            </if>
            <if test="limit != null">

        `limit`,

            </if>
            <if test="useNumb != null">

        use_numb,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="moduleType != null">
                #{moduleType,jdbcType=CHAR},

            </if>
            <if test="limit != null">

        #{limit,jdbcType=INTEGER},

            </if>
            <if test="useNumb != null">

        #{useNumb,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.minigod.protocol.notify.model.StatisticCall">
        <!--@mbg.generated-->
    update statistic_call

        <set>
            <if test="moduleType != null">
                module_type = #{moduleType,jdbcType=CHAR},

            </if>
            <if test="limit != null">

        `limit` = #{limit,jdbcType=INTEGER},

            </if>
            <if test="useNumb != null">

        use_numb = #{useNumb,jdbcType=INTEGER},
            </if>
        </set>

    where id = #{id,jdbcType=INTEGER}

    </update>
    <update id="updateByPrimaryKey" parameterType="com.minigod.protocol.notify.model.StatisticCall">
        <!--@mbg.generated-->
    update statistic_call
    set module_type = #{moduleType,jdbcType=CHAR},
      `limit` = #{limit,jdbcType=INTEGER},
      use_numb = #{useNumb,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}

    </update>
    <update id="updateBatch" parameterType="java.util.List">
        <!--@mbg.generated-->
    update statistic_call

        <trim prefix="set" suffixOverrides=",">
            <trim prefix="module_type = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=INTEGER} then #{item.moduleType,jdbcType=CHAR}
                </foreach>
            </trim>
            <trim prefix="`limit` = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=INTEGER} then #{item.limit,jdbcType=INTEGER}
                </foreach>
            </trim>
            <trim prefix="use_numb = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=INTEGER} then #{item.useNumb,jdbcType=INTEGER}
                </foreach>
            </trim>
        </trim>

    where id in

        <foreach close=")" collection="list" item="item" open="(" separator=", ">
            #{item.id,jdbcType=INTEGER}
        </foreach>
    </update>
    <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
        <!--@mbg.generated-->
    insert into statistic_call
    (module_type, `limit`, use_numb)
    values

        <foreach collection="list" item="item" separator=",">
            (#{item.moduleType,jdbcType=CHAR}, #{item.limit,jdbcType=INTEGER}, #{item.useNumb,jdbcType=INTEGER}
        )
        </foreach>
    </insert>
    <insert id="insertOrUpdate" keyColumn="id" keyProperty="id"
            parameterType="com.minigod.protocol.notify.model.StatisticCall" useGeneratedKeys="true">
        <!--@mbg.generated-->
    insert into statistic_call

        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,

            </if>

      module_type,
      `limit`,
      use_numb,
        </trim>

    values

        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},

            </if>

      #{moduleType,jdbcType=CHAR},
      #{limit,jdbcType=INTEGER},
      #{useNumb,jdbcType=INTEGER},
        </trim>

    on duplicate key update 

        <trim suffixOverrides=",">
            <if test="id != null">
                id = #{id,jdbcType=INTEGER},

            </if>

      module_type = #{moduleType,jdbcType=CHAR},
      `limit` = #{limit,jdbcType=INTEGER},
      use_numb = #{useNumb,jdbcType=INTEGER},
        </trim>
    </insert>
    <insert id="insertOrUpdateSelective" keyColumn="id" keyProperty="id"
            parameterType="com.minigod.protocol.notify.model.StatisticCall" useGeneratedKeys="true">
        <!--@mbg.generated-->
    insert into statistic_call

        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,

            </if>
            <if test="moduleType != null">

        module_type,

            </if>
            <if test="limit != null">

        `limit`,

            </if>
            <if test="useNumb != null">

        use_numb,
            </if>
        </trim>

    values

        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},

            </if>
            <if test="moduleType != null">

        #{moduleType,jdbcType=CHAR},

            </if>
            <if test="limit != null">

        #{limit,jdbcType=INTEGER},

            </if>
            <if test="useNumb != null">

        #{useNumb,jdbcType=INTEGER},
            </if>
        </trim>

    on duplicate key update 

        <trim suffixOverrides=",">
            <if test="id != null">
                id = #{id,jdbcType=INTEGER},

            </if>
            <if test="moduleType != null">

        module_type = #{moduleType,jdbcType=CHAR},

            </if>
            <if test="limit != null">

        `limit` = #{limit,jdbcType=INTEGER},

            </if>
            <if test="useNumb != null">

        use_numb = #{useNumb,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
<!--auto generated by MybatisCodeHelper on 2020-08-08-->
    <update id="updateUseNumbByIdAndModuleType">
        update statistic_call
        set use_numb=use_numb+1
        where module_type=#{moduleType,jdbcType=CHAR}
    </update>
</mapper>